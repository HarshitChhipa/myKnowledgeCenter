This file contains all my new finding about JS.
--> There is a function to check and array same as php named as isArray.

https://medium.com/dailyjs/better-array-check-with-array-isarray-dae0283263be


==> What is memoization.

Memoization is the process of caching the output of function calls so that subsequent calls are faster. 
Calling the function again with the same input will return the cached output without needing to do the calculation again.
A basic implementation in JavaScript looks like this:

const memoize = fn => {
  const cache = new Map()
  return value => {
    const cachedResult = cache.get(value)
    if (cachedResult !== undefined) return cachedResult
    const result = fn(value)
    cache.set(value, result)
    return result
  }
}

############################################################################ NEW FINDINGS ###################################

What is the purpose of callback function as an argument of setState?

The callback function is invoked when setState has finished and the component gets rendered. 
Since setState is asynchronous, the callback function is used for any post action.

setState({ name: "Harshit" }, () => {
  console.log("The name has updated and component re-rendered")
})

Extra
The callback function is invoked after setState finishes and is used for any post action.
It is recommended to use lifecycle method rather this callback function.

################################################################################# ENDS HERE ##################################

################################################################################# NEW ########################################

--> What is the DOM?
The DOM (Document Object Model) is a cross-platform API that treats HTML and XML documents as a tree structure consisting of nodes. 
These nodes (such as elements and text nodes) are objects that can be programmatically manipulated and any visible changes made to them are reflected live in the document.
In a browser, this API is available to JavaScript where DOM nodes can be manipulated to change their styles, contents, placement in the document, or interacted with through event listeners.

--> The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API.
The DOM is constructed progressively in the browser as a page loads, which is why scripts are often placed at the bottom of a page, in the <head> with a defer attribute, or inside a DOMContentLoaded event listener. Scripts that manipulate DOM nodes should be run after the DOM has been constructed to avoid errors.
document.getElementById() and document.querySelector() are common functions for selecting DOM nodes.
Setting the innerHTML property to a new value runs the string through the HTML parser, offering an easy way to append dynamic HTML content to a node.

################################################################################# ENDS HERE ##################################

################################################################################# NEW  #######################################

--> What is short-circuit evaluation in JavaScript?
Short-circuit evaluation involves logical operations evaluating from left-to-right and stopping early.
--> eg. --> true || false
we know that it is true and it is a or statement so no need to check further.
Its major use in Vanila JS.

// Instead of:
addEventListener("click", e => {
  if (e.target.closest("button")) {
    handleButtonClick(e)
  }
})

// You can take advantage of short-circuit evaluation:
addEventListener(
  "click",
  e => e.target.closest("button") && handleButtonClick(e)
)
############################################################## ENDS HERE  ####################################################
############################################################## NEW HERE ######################################################

--> What is a callback?
Callbacks are functions passed as an argument to another function to be executed once an event has occurred or a certain task is complete, often used in asynchronous code. Callback functions are invoked later by a piece of code but can be declared on initialization without being invoked.
As an example, event listeners are asynchronous callbacks that are only executed when a specific event occurs.

function onClick() {
  console.log("The user clicked on the page.")
}
document.addEventListener("click", onClick)
However, callbacks can also be synchronous. The following map function takes a callback function that is invoked synchronously for each iteration of the loop (array element).

const map = (arr, callback) => {
  const result = []
  for (let i = 0; i < arr.length; i++) {
    result.push(callback(arr[i], i))
  }
  return result
}
map([1, 2, 3, 4, 5], n => n * 2) // [2, 4, 6, 8, 10]

############################################################# Assigning ###################################################
Sometimes using = operator can make issue to your script coz somehow when you do assigning a object to another object assiging to the new object gives the wrights to change in tha original change
when any change happened to the new assigned object and this is not what we want so to prevent this we do these things.

1) const obj = { a: 1, b: 2 }
const shallowClone = { ...obj }
Using the spread operator.
Using the object spread operator ..., 
the object's own enumerable properties can be copied into the new object.
This creates a shallow clone of the object.

With this technique, prototypes are ignored. In addition, nested objects are not cloned, but rather their references get copied, so nested objects still refer to the same objects as the original. Deep-cloning is much more complex in order to effectively clone any type of object (Date, RegExp, Function, Set, etc) that may be nested within the object.

Other alternatives include:

2) JSON.parse(JSON.stringify(obj)) can be used to deep-clone a simple object, but it is CPU-intensive and only accepts valid JSON (therefore it strips functions and does not allow circular references).
Object.assign({}, obj) is another alternative.
Object.keys(obj).reduce((acc, key) => (acc[key] = obj[key], acc), {}) is another more verbose alternative that shows the concept in greater depth.


#################################################### NEW ###################################################
Here is the article for the memory leakage for reference.
https://medium.com/javascript-in-plain-english/memory-leaks-and-garbage-collection-%EF%B8%8F-in-javascript-you-need-to-know-this-3fa8173e8b3c
